{"ast":null,"code":"var _jsxFileName = \"/Users/senash/Downloads/HealthCare-App/frontend/src/components/OnlinePharmacy/Cart.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { CartContext } from './CartContext';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: 'drugname',\n  headerName: 'Name of Drug',\n  width: 180\n}, {\n  field: 'priceperunit',\n  headerName: 'Price Per Unit(Rs.)',\n  type: 'number',\n  width: 190\n}, {\n  field: 'total',\n  headerName: 'Total',\n  description: 'This column has a value getter and is not sortable.',\n  sortable: false,\n  width: 190,\n  valueGetter: (value, row) => `${row.firstName || ''} ${row.lastName || ''}`\n}];\nexport default function Cart() {\n  _s();\n  const {\n    cart\n  } = React.useContext(CartContext);\n  const rows = cart.map((item, index) => ({\n    id: index + 1,\n    drugname: item.drugname,\n    priceperunit: item.priceperunit,\n    total: item.priceperunit // You can calculate the total here based on your logic\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 400,\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      initialState: {\n        pagination: {\n          paginationModel: {\n            page: 0,\n            pageSize: 5\n          }\n        }\n      },\n      pageSizeOptions: [5, 10],\n      checkboxSelection: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n_s(Cart, \"cFpshNj6MSXSygiIUOgoIf37O+Y=\");\n_c = Cart;\nvar _c;\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"names":["React","CartContext","DataGrid","jsxDEV","_jsxDEV","columns","field","headerName","width","type","description","sortable","valueGetter","value","row","firstName","lastName","Cart","_s","cart","useContext","rows","map","item","index","id","drugname","priceperunit","total","style","height","children","initialState","pagination","paginationModel","page","pageSize","pageSizeOptions","checkboxSelection","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/senash/Downloads/HealthCare-App/frontend/src/components/OnlinePharmacy/Cart.js"],"sourcesContent":["import * as React from 'react' ;\nimport { CartContext } from './CartContext';\nimport { DataGrid } from '@mui/x-data-grid';\n\nconst columns = [\n    \n    { field: 'drugname', headerName: 'Name of Drug', width: 180 },\n   \n    {\n      field: 'priceperunit',\n      headerName: 'Price Per Unit(Rs.)',\n      type: 'number',\n      width: 190,\n    },\n    {\n      field: 'total',\n      headerName: 'Total',\n      description: 'This column has a value getter and is not sortable.',\n      sortable: false,\n      width: 190,\n      valueGetter: (value, row) => `${row.firstName || ''} ${row.lastName || ''}`,\n    },\n  ];\n  \n  \n\nexport default function Cart() {\n\n    const {cart} = React.useContext(CartContext);\n\n    const rows = cart.map((item, index) => ({\n        id: index + 1,\n        drugname: item.drugname,\n        priceperunit: item.priceperunit,\n        total: item.priceperunit, // You can calculate the total here based on your logic\n      }));\n\n    return (\n        <div style={{ height: 400, width: '100%' }}>\n          <DataGrid\n            rows={rows}\n            columns={columns}\n            initialState={{\n              pagination: {\n                paginationModel: { page: 0, pageSize: 5 },\n              },\n            }}\n            pageSizeOptions={[5, 10]}\n            checkboxSelection\n          />\n        </div>\n      );\n  \n\n   \n}"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,OAAO,GAAG,CAEZ;EAAEC,KAAK,EAAE,UAAU;EAAEC,UAAU,EAAE,cAAc;EAAEC,KAAK,EAAE;AAAI,CAAC,EAE7D;EACEF,KAAK,EAAE,cAAc;EACrBC,UAAU,EAAE,qBAAqB;EACjCE,IAAI,EAAE,QAAQ;EACdD,KAAK,EAAE;AACT,CAAC,EACD;EACEF,KAAK,EAAE,OAAO;EACdC,UAAU,EAAE,OAAO;EACnBG,WAAW,EAAE,qDAAqD;EAClEC,QAAQ,EAAE,KAAK;EACfH,KAAK,EAAE,GAAG;EACVI,WAAW,EAAEA,CAACC,KAAK,EAAEC,GAAG,KAAM,GAAEA,GAAG,CAACC,SAAS,IAAI,EAAG,IAAGD,GAAG,CAACE,QAAQ,IAAI,EAAG;AAC5E,CAAC,CACF;AAIH,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAE3B,MAAM;IAACC;EAAI,CAAC,GAAGnB,KAAK,CAACoB,UAAU,CAACnB,WAAW,CAAC;EAE5C,MAAMoB,IAAI,GAAGF,IAAI,CAACG,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;IACpCC,EAAE,EAAED,KAAK,GAAG,CAAC;IACbE,QAAQ,EAAEH,IAAI,CAACG,QAAQ;IACvBC,YAAY,EAAEJ,IAAI,CAACI,YAAY;IAC/BC,KAAK,EAAEL,IAAI,CAACI,YAAY,CAAE;EAC5B,CAAC,CAAC,CAAC;EAEL,oBACIvB,OAAA;IAAKyB,KAAK,EAAE;MAAEC,MAAM,EAAE,GAAG;MAAEtB,KAAK,EAAE;IAAO,CAAE;IAAAuB,QAAA,eACzC3B,OAAA,CAACF,QAAQ;MACPmB,IAAI,EAAEA,IAAK;MACXhB,OAAO,EAAEA,OAAQ;MACjB2B,YAAY,EAAE;QACZC,UAAU,EAAE;UACVC,eAAe,EAAE;YAAEC,IAAI,EAAE,CAAC;YAAEC,QAAQ,EAAE;UAAE;QAC1C;MACF,CAAE;MACFC,eAAe,EAAE,CAAC,CAAC,EAAE,EAAE,CAAE;MACzBC,iBAAiB;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAKd;AAACxB,EAAA,CA7BuBD,IAAI;AAAA0B,EAAA,GAAJ1B,IAAI;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}